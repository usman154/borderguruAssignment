{
    "swagger": "2.0",
    "info": {
      "description": "Here is the API documentation for the assignment for the first round of interviews by `BorderGuru`",
      "version": "1.0.0",
      "title": "Coding Challenge",
       
      "contact": {
        "email": "m.usmanrana154@gmail.com"
      }
    },
    "host": "localhost:3000",
    "basePath": "/",
    "tags": [
      {
        "name": "Orders",
        "description": "APIs labelled with this tag are specific to order things mentioned in the requirement documentation like createing new order, generating reposts against order data etc."
      },
      {
        "name": "Customers",
        "description": "APIs labelled with this tag are specific to Customer attribute the we are supposed to manage with order data"
      }
    ],
    "schemes": [
      "http"
    ],
    "paths": {
      "/orders/createNewOrder": {
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "This API is being used to add new order in the database",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Order object that needs to be added to the db",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          }
        }
        
      },
      "/orders/getAllOrdersFromGivenCustomer": {
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "This API is being used to fetch all the orders placed against the specified customer.",
          "description": "Please note that if you only add `customerName` in the body payload, the orders will be searched against customer name, which is the first question to be answered in assignment, and if you specify `customerAddress` in the path, orders will be searched against `customerAddress` and that covers the second point raised in assignment",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CustomerFind"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "If something bad happens backend"
            },
            "200": {
              "description": "On success it will return list of all the orders placed by the specified customer",
              "schema": {
                "$ref": "#/definitions/OrderList"
              }
            }
          }
        }
        
      },
      "/orders/updateOrder/{id}": {
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "This API takes `id` of the order as path parameter and the order object with updated values. And at the end, it update the order record.",
          "description": "Returns a single pet",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of order that we want to update",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Order object with updated values",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Pet"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          }
          
        }
      },
      "/orders/deleteOrder/{id}" : {
        "delete": {
          "tags": [
            "Orders"
          ],
          "summary": "Deletes an order",
          "description": "This API deletes the order",
          "produces": [
            "application/json"
          ],
          "parameters": [
             
            {
              "name": "id",
              "in": "path",
              "description": "Pet id to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          }
        }
      },
      "/orders/getOrderListSorted": {
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "",
          "description": "This API gets a list with all the item names and how many times they have been ordered, shows the items that have been ordered the most at the beginning of the list, and in case of items with the same amount of occurrences, then sorts their names alphabetically",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/SortedObject"
              }
            }
          }
          
        }
      },
      "/customers/getCustomerInfo/{name}": {
        "get": {
          "tags": [
            "Customers"
          ],
          "summary": "This API accepts customer name as input paramter and returns the list of matched customers",
          "description": "",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "type" : "string",
              "name": "name",
              "description": "Name of the customer that we want to search",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Order"
              }
            },
            "400": {
              "description": "Invalid Order"
            }
          }
        }
      },
      "/customers/createCustomer": {
        "post": {
          "tags": [
            "Customers"
          ],
          "summary": "Creates list of users with given input array",
          "description": "Please note that this is not the name of any attribute. By defualt there are only 2 customer fields (customerName and customerAddress). But there is an option to add new customer info (please review the api stated below), so you can add as much key value pairs to create/update the customer provided that you first create new customer attribute by the API below and then use that additional attribute here",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Customer's object that we want to add in database",
              "required": true,
              "schema": {
                  "$ref": "#/definitions/CustomerInfo"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/customers/updateCustomerInfo": {
        "put": {
          "tags": [
            "Customers"
          ],
          "summary": "Creates list of users with given input array",
          "description": "Please note that this is not the name of any attribute. By defualt there are only 2 customer fields (customerName and customerAddress). But there is an option to add new customer info (please review the api stated below), so you can add as much key value pairs to create/update the customer provided that you first create new customer attribute by the API below and then use that additional attribute here",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "customer",
              "description": "List of user object",
              "required": true,
              "schema": {
                  "$ref": "#/definitions/UpdateCustomer"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/customers/addNewCustomerAttribute": {
        "post": {
          "tags": [
            "Customers"
          ],
          "summary": "Creates list of users with given input array",
          "description": "This is the API to deal with the tricky part of the assignment, where stakeholder asks to add the support for additional customer info in the application. So what will happen is, we will add as much additional attributes as we want for the customer. This API will add the additional customer attributes to database `customer` table and won't break the backend compatibilty. Values for the addtional attributes would be `null` for the old customer records who didn't had this value.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Customer's object that we want to update. `customer` object in payload comes up with only `customerName` and `customerAddress` to uniquely identify a user. And `customerInfo` is the Customer's object with updated values",
              "required": true,
              "schema": {
                  "$ref": "#/definitions/UpdateCustomer"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/customers/deleteCustomerInfo": {
        "delete": {
          "tags": [
            "Customers"
          ],
          "summary": "Delets a customer",
          "description": "This API take customer's unique info i-e `customerName` and `customerAttribute` and deletes the Customer from database if found and sets the value to `null` in order fields for the values used in order schema",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "customer",
              "description": "List of user object",
              "required": true,
              "schema": {
                  "$ref": "#/definitions/CustomerFind"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/customers/getAllOrdersByCustomer": {
        "post": {
          "tags": [
            "Customers"
          ],
          "summary": "Returns list of all the orders bought by the specified customer",
          "description": "",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "List of user object",
              "required": true,
              "schema": {
                  "$ref": "#/definitions/CustomerFind"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/customers/getAmountPaidByCustomer": {
        "post": {
          "tags": [
            "Customers"
          ],
          "summary": "Calculates and retuens the total amound paid by a specific customer",
          "description": "",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "List of user object",
              "required": true,
              "schema": {
                  "$ref": "#/definitions/CustomerFind"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/customers/getCustomerWithOrder/{item}": {
        "get": {
          "tags": [
            "Customers"
          ],
          "summary": "Returns the list of all the customers who bought the specified item",
          "description": "",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "item",
              "description": "Name of the item to be searched",
              "required": true,
              "type" : "string"
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/customers/getCustomerColumns": {
        "get": {
          "tags": [
            "Customers"
          ],
          "summary": "Returs the list of customer attribute",
          "description": "",
          "produces": [
            "application/json"
          ],
          "parameters": [
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/customers/getCustomers": {
        "get": {
          "tags": [
            "Customers"
          ],
          "summary": "Retuens the list of all the customers in the database",
          "description": "",
          "produces": [
            "application/json"
          ],
          "parameters": [
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type" : "array",
                "items" :{
                "$ref": "#/definitions/CustomerInfo"  
                }
                
              }
            }
          }
        }
      }
    },
    "securityDefinitions": {
      "petstore_auth": {
        "type": "oauth2",
        "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
        "flow": "implicit",
        "scopes": {
          "write:pets": "modify pets in your account",
          "read:pets": "read your pets"
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    "definitions": {
      "Order": {
        "type": "object",
        "properties": {
          "item": {
            "type": "string"
          },
          "customerName": {
            "type": "string",
             "description" : "The backed is designed in a way that the order will only be added if the customer mentioned exists in the database or you'll first have to add a customer and then use the `customerName` and `customerAddress` to add any new order against that customer"
          },
          "customerAddress": {
            "description" : "The backed is designed in a way that the order will only be added if the customer mentioned exists in the database or you'll first have to add a customer and then use the `customerName` and `customerAddress` to add any new order against that customer",
            "type": "string"
          },
          "price": {
            "type": "integer"
          },
          "currency": {
            "type": "string",
            "description": "For the time being, I've handled only two currencies (`EUR` and `USD`) in the code. But code is really extensible and can easily be modified to handle any new currencies if added. Why ? Because, there is a part in the code where I am supposed to calculate the total amount spent by a customer, so, I need to make conversions over there.",
            "enum": [
              "EUR",
              "USD"
            ]
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "OrderList" : {
        "type" : "array",
        "items": {
          "$ref": "#/definitions/Order"
        }
      },
      "SortedOrderObject" : {
        "type" : "object", 
         "properties" : {
            "item" : {
              "type" : "string"
            },
            "occurrences" : {
              "type" : "integer"
            }
         }
      },
      "SortedObject" : {
        "type" : "array",
         "items" : {
           "$ref" : "#/definitions/SortedOrderObject"
         }
      },
      "UpdateCustomer" : {
        "type" : "object",
        "properties" : {
          "customer" : {
            "type" : "object",
              "$ref" : "#/definitions/CustomerFind"
          },
          "customerInfo" : {
            "type" : "object",
            "$ref" : "#/definitions/CustomerInfo"
          }
        }
      },
      "CustomerInfo" : {
        "type" : "object",
         "properties" : {
           "customerAddress" : {
             "type" : "string"
           },
           "customerName" : {
             "type" : "string"
           },
           "additionalAttributeIfAdded" : {
             "type" : "string",
             "description" : "Please note that this is not the name of any attribute. By defualt there are only 2 customer fields (`customerName` and `customerAddress`). But there is an option to add new customer info (please review the api stated below), so you can add as much key value pairs to create/update the customer provided that you first create new customer attribute by the API below and then use that additional attribute here"
           }
         }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "CustomerFind" : {
        "type" : "object",
        "properties" : {
           "customerName" : {
             "type" : "string"
           },
           "customerAddress" : {
             "type" : "string"
           }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Pet": {
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/definitions/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/definitions/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }